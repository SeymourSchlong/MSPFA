/**
 * An object that maps HTML/SVG attribute names to their corresponding React prop names, excluding event listeners and names that map to themselves.
 *
 * Source: https://github.com/facebook/react/blob/feb134c30d20ef332771d71d8d1cb66d34311637/packages/react-dom/src/shared/possibleStandardNames.js
 *
 * Examples:
 * * `'class'` -> `'className'`
 * * `'autofocus'` -> `'autoFocus'`
 * * `'xlink:href'` -> `'xlinkHref'`
 */
export const reactPropNames: Partial<Record<string, string>> = {
	// HTML attributes.
	'accept-charset': 'acceptCharset',
	'accesskey': 'accessKey',
	'allowfullscreen': 'allowFullScreen',
	'autocapitalize': 'autoCapitalize',
	'autocomplete': 'autoComplete',
	'autocorrect': 'autoCorrect',
	'autofocus': 'autoFocus',
	'autoplay': 'autoPlay',
	'autosave': 'autoSave',
	'cellpadding': 'cellPadding',
	'cellspacing': 'cellSpacing',
	'charset': 'charSet',
	// `checked` maps to `defaultChecked` because otherwise re-renders would prevent a checkbox from changing value.
	'checked': 'defaultChecked',
	'class': 'className',
	'classid': 'classID',
	'colspan': 'colSpan',
	'contenteditable': 'contentEditable',
	'contextmenu': 'contextMenu',
	'controlslist': 'controlsList',
	'crossorigin': 'crossOrigin',
	'datetime': 'dateTime',
	'disablepictureinpicture': 'disablePictureInPicture',
	'disableremoteplayback': 'disableRemotePlayback',
	'enctype': 'encType',
	'enterkeyhint': 'enterKeyHint',
	'for': 'htmlFor',
	'formmethod': 'formMethod',
	'formaction': 'formAction',
	'formenctype': 'formEncType',
	'formnovalidate': 'formNoValidate',
	'formtarget': 'formTarget',
	'frameborder': 'frameBorder',
	'hreflang': 'hrefLang',
	'http-equiv': 'httpEquiv',
	'inputmode': 'inputMode',
	'itemid': 'itemID',
	'itemprop': 'itemProp',
	'itemref': 'itemRef',
	'itemscope': 'itemScope',
	'itemtype': 'itemType',
	'keyparams': 'keyParams',
	'keytype': 'keyType',
	'marginwidth': 'marginWidth',
	'marginheight': 'marginHeight',
	'maxlength': 'maxLength',
	'mediagroup': 'mediaGroup',
	'minlength': 'minLength',
	'nomodule': 'noModule',
	'novalidate': 'noValidate',
	'playsinline': 'playsInline',
	'radiogroup': 'radioGroup',
	'readonly': 'readOnly',
	'referrerpolicy': 'referrerPolicy',
	'rowspan': 'rowSpan',
	'spellcheck': 'spellCheck',
	'srcdoc': 'srcDoc',
	'srclang': 'srcLang',
	'srcset': 'srcSet',
	'tabindex': 'tabIndex',
	'usemap': 'useMap',
	// `value` maps to `defaultValue` because otherwise re-renders would prevent an input from changing value.
	'value': 'defaultValue',

	// SVG attributes.
	'accent-height': 'accentHeight',
	'alignment-baseline': 'alignmentBaseline',
	'arabic-form': 'arabicForm',
	'baseline-shift': 'baselineShift',
	'cap-height': 'capHeight',
	'clip-path': 'clipPath',
	'clip-rule': 'clipRule',
	'color-interpolation': 'colorInterpolation',
	'color-interpolation-filters': 'colorInterpolationFilters',
	'color-profile': 'colorProfile',
	'color-rendering': 'colorRendering',
	'dominant-baseline': 'dominantBaseline',
	'enable-background': 'enableBackground',
	'fill-opacity': 'fillOpacity',
	'fill-rule': 'fillRule',
	'flood-opacity': 'floodOpacity',
	'flood-color': 'floodColor',
	'font-family': 'fontFamily',
	'font-size': 'fontSize',
	'font-size-adjust': 'fontSizeAdjust',
	'font-stretch': 'fontStretch',
	'font-style': 'fontStyle',
	'font-variant': 'fontVariant',
	'font-weight': 'fontWeight',
	'glyph-name': 'glyphName',
	'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	'glyph-orientation-vertical': 'glyphOrientationVertical',
	'horiz-adv-x': 'horizAdvX',
	'horiz-origin-x': 'horizOriginX',
	'image-rendering': 'imageRendering',
	'letter-spacing': 'letterSpacing',
	'lighting-color': 'lightingColor',
	'marker-end': 'markerEnd',
	'marker-mid': 'markerMid',
	'marker-start': 'markerStart',
	'overline-position': 'overlinePosition',
	'overline-thickness': 'overlineThickness',
	'paint-order': 'paintOrder',
	'panose-1': 'panose1',
	'pointer-events': 'pointerEvents',
	'rendering-intent': 'renderingIntent',
	'shape-rendering': 'shapeRendering',
	'stop-color': 'stopColor',
	'stop-opacity': 'stopOpacity',
	'strikethrough-position': 'strikethroughPosition',
	'strikethrough-thickness': 'strikethroughThickness',
	'stroke-dasharray': 'strokeDasharray',
	'stroke-dashoffset': 'strokeDashoffset',
	'stroke-linecap': 'strokeLinecap',
	'stroke-linejoin': 'strokeLinejoin',
	'stroke-miterlimit': 'strokeMiterlimit',
	'stroke-width': 'strokeWidth',
	'stroke-opacity': 'strokeOpacity',
	'text-anchor': 'textAnchor',
	'text-decoration': 'textDecoration',
	'text-rendering': 'textRendering',
	'underline-position': 'underlinePosition',
	'underline-thickness': 'underlineThickness',
	'unicode-bidi': 'unicodeBidi',
	'unicode-range': 'unicodeRange',
	'units-per-em': 'unitsPerEm',
	'v-alphabetic': 'vAlphabetic',
	'vector-effect': 'vectorEffect',
	'vert-adv-y': 'vertAdvY',
	'vert-origin-x': 'vertOriginX',
	'vert-origin-y': 'vertOriginY',
	'v-hanging': 'vHanging',
	'v-ideographic': 'vIdeographic',
	'v-mathematical': 'vMathematical',
	'word-spacing': 'wordSpacing',
	'writing-mode': 'writingMode',
	'x-height': 'xHeight',
	'xlink:actuate': 'xlinkActuate',
	'xlink:arcrole': 'xlinkArcrole',
	'xlink:href': 'xlinkHref',
	'xlink:role': 'xlinkRole',
	'xlink:show': 'xlinkShow',
	'xlink:title': 'xlinkTitle',
	'xlink:type': 'xlinkType',
	'xml:base': 'xmlBase',
	'xml:lang': 'xmlLang',
	'xml:space': 'xmlSpace',
	'xmlns:xlink': 'xmlnsXlink'
};

/**
 * An object which maps the name of each prop that represents a boolean attribute to `true`. If a prop does not represent a boolean attribute, its name is not in this object's keys.
 *
 * See https://www.w3.org/TR/html52/infrastructure.html#sec-boolean-attributes for the definition of a boolean attribute. Does not include boolean-ish string attributes such as `contentEditable`, which accepts a string such as `'false'`.
 *
 * Sources:
 * * https://github.com/facebook/react/blob/5890e0e692d1c39eddde0110bd0d123409f31dd3/packages/react-dom/src/shared/DOMProperty.js#L318
 * * https://github.com/facebook/react/blob/5890e0e692d1c39eddde0110bd0d123409f31dd3/packages/react-dom/src/shared/DOMProperty.js#L358
 */
export const booleanProps: Readonly<Partial<Record<string, true>>> = {
	allowFullScreen: true,
	async: true,
	autoFocus: true,
	autoPlay: true,
	controls: true,
	default: true,
	defer: true,
	disabled: true,
	disablePictureInPicture: true,
	disableRemotePlayback: true,
	formNoValidate: true,
	hidden: true,
	loop: true,
	noModule: true,
	noValidate: true,
	open: true,
	playsInline: true,
	readOnly: true,
	required: true,
	reversed: true,
	scoped: true,
	seamless: true,
	// We use `defaultChecked` instead of `checked` since `reactPropNames.checked === 'defaultChecked'`.
	defaultChecked: true,
	itemScope: true,
	multiple: true,
	muted: true,
	selected: true
};